[
    {
        "_key": "1",
        "content": {
            "requirements": [
                "This particular project was self-initiated. My intent was to demonstrate the sizable improvements that could be made to our members’ experience at the moment they secure a new listing and are ready to enter it into our listing database. (At which point it typically becomes available to the public.)",
                "Agents currently face two choices: fill out a six-page PDF document—which then needs to be emailed over to us—or enter the details online through MLS software we license. The latter might seem the more appealing of the two, but it comes with its own shortcomings.",
                "First and foremost, the interface is not responsive. When accessing the site from a mobile device the regular desktop layout is always the one presented. Secondly, even to take it in isolation as a purely desktop-based experience, it’s not well thought out — the interface is clumsy and difficult to navigate. The clearest way to describe it would be to say it feels generic, likely the result of it having been originally created for financial software more than a decade ago. Both shortcomings have a significant negative impact on the member experience.",
                "So, how to address this? I envisaged an entirely schema-driven form: the structure, data and validation all living within a single JSON file, to be assembled into an approachable and intuitive interface by a modern JavaScript framework. The advantages would be threefold: members would receive a modern, mobile-first solution with which to enter their listings, one consistent with our branding; we would gain an additional way to differentiate ourselves from other boards in the area, an especially important trait when considering potential members living just outside of our jurisdiction; and we would maintain consistency in the member experience if we migrated to an alternative MLS software provider in the future."
            ],
            "process": [
                "Ensuring the idea’s viability before getting in too deep was paramount, so initially I limited myself to only recreating a subset of the first page of the PDF. Once I was satisfied with how it had come together, only then did I proceed to assemble the rest.",
                "Vue 3 was my framework of choice, mostly because it’s the one I enjoy working with the most. Nevertheless — this project could’ve just as easily been realised with React.",
                "In an effort to reduce the amount of time I’d be spending on the design of each individual input component, I decided to experiment with the PrimeFaces UI library. In this way I was able to quickly grab their base components and make alterations as necessary. One approach I used a couple of times was to group particular inputs into single components where it made sense to do so. For example: radio buttons and checkboxes were a natural fit due to the significant degree of overlap of their behaviour and layout."
            ],
            "challenges": [
                "One stands out in particular: the best way to capture the extensive information associated with each room, bathroom and open house entered for a property. Each of these objects are composed of several different fields and have their own limitations on the quantity permitted. In the end I built a “repetition” component, one capable of instantiating new versions of its contents whenever the existing instances had been fully filled with data. I was pleased with this approach because it strongly promotes the concept of component reusability: anything could be dropped in going forward.",
                "Other than that, I also ran into an apparent bug with one of the PrimeFaces components. I opened an issue on their repository but I also cobbled together a temporary workaround so it wouldn’t be necessary to wait on them. If they’re unable to address the issue then I might need to revisit the workaround and verify that it’s the cleanest possible approach."
            ],
            "future": [
                "This whole project was very much a proof-of-concept, and the design reflects that. Maintaining the layout as a single page was as much for my own convenience as it was a design choice — going forward I believe there would be definite benefit to be had from splitting the form into separate sections. Not just to reduce the intimidation factor when a user first arrives, but also to simplify the process of referring back to a field when you don’t remember where it’s located.",
                "There are surely countless other improvements that would naturally manifest themselves should this become a fully fledged project: the ability to upload photos, auto-save behaviour for users who want to resume later, the hiding of certain fields if they no longer apply (based on choices made earlier, for example). There are a tonne of possibilities.",
                "Having said that — the most sensible immediate next step would be to solicit feedback from existing power users of both the PDF and desktop interface. Hearing their thoughts at this early stage would help inform our priorities going forward, strengthening our ability to design for the people we’re most aiming to help."
            ]
        },
        "language": "Vue",
        "title": "Listing form"
    },
    {
        "_key": "2",
        "content": {
            "requirements": [
                "A little context to begin with! Within the world of real estate each property is assigned its own unique ‘property identification number’, or ‘PID number’ for short. Detached, single-family homes have one, duplexes have a couple and in the case of apartments, each unit has its own separate PID.",
                "A challenge arises when agents wish to add their new property to the MLS system but the PID number hasn’t yet been assigned. It’s not possible to create a listing without one, so suddenly there’s a stumbling block.",
                "For a long time the solution has been to hand out ‘fake’ PIDs to agents, ones they can use in place of the actual PID until the real one has been issued. These fake PIDs occupy a certain range so they can easily be identified in retrospect.",
                "For at least a decade we’ve had a basic internal web app allowing staff to generate these fake PIDs. However, in the course of being migrated to a new server it partially broke — going from being capable of issuing up to nine PIDs at a time to just one. Compounding this issue was the fact the original source code had been misplaced and lost a long time ago. The only path forward was to build a new solution from scratch.",
                "As such, the primary requirements here can really be summed up in two parts: the obvious need to re-create the PID generator as a modern service, but also to design it in a way that our members could use it themselves. This last part was key — it would remove the necessity of them having to call staff each and every time they found themselves in need, thus reducing the amount of time needed to address this issue on a day-to-day basis."
            ],
            "process": [
                "This project overlapped with the much larger work of changing CRM system, switching from a slightly dated on-premises solution to a modern one located in Azure (Microsoft Dynamics). Despite this progressive move, the majority of the new integration points were still set to run through the on-premises data centre. This struck me as vaguely anachronistic and became part of my motivation to ensure this PID generator project would be entirely cloud-native — the organisation’s first in its entirety.",
                "My chosen infrastructure became:",
                "Azure Blob Storage for the frontend. Microsoft also offer the ‘Azure Static Web Apps’ service (capable of auto-publishing any new commits made to a git repository, à la Netlify) but this offering was still in preview status at the time and they discouraged the use of it in production environments.",
                "Azure Functions for the backend — its prime job being to communicate with the database and perform validation. Azure Functions supports a variety of languages but I chose C# for a couple of reasons: it’s generally favoured by the organisation but also has the fastest cold boot times out of all the supported languages. (I’d come across someone’s comprehensive write-up which extensively compared cold boot times for each Azure Functions language.)",
                "Azure Cosmos DB for the database. Someone pointed out to me that a distributed database was a strange choice for what would be essentially the sole task of incrementing consecutive IDs, but the main motivation here was Microsoft having recently enabled serverless billing. (This being an alternative to their traditional model that normally requires a base level of throughput to be reserved and paid for.) This resulted in a free tier for the Cosmos DB service, translating to a vast reduction in cost compared with their previous billing model. The PID generator has always been a relatively low priority service, so ensuring non-existent costs was a great bonus.",
                "Last but not least, Vue was my choice of framework for the frontend, even given the small scale of the app. This decision was partly based on wanting to simplify the handling of incoming PIDs as much as possible, but also because it seemed like a good opportunity to become more familiar with Vue."
            ],
            "challenges": [
                "Composing the backend logic took longer than I’d anticipated, mostly because I hadn’t expected the need for the Azure Function to perform an atomic read-write on the database. It’s imperative for members to not receive the same PID as someone else, so the database must finish reading, incrementing and writing the new value prior to allowing anyone else to read it.",
                "This simply isn’t possible with the .NET SDK, because Cosmos DB isn’t designed to work this way. Nonetheless, the promise of zero costs meant I wasn’t deterred for very long — I ended up writing a stored procedure within the database’s JavaScript environment. This also provided an unexpected benefit: the read-write was now computationally cheaper than it would’ve been otherwise. For a web app with such low traffic this saving won’t produce any real-world differences, but I view it as valuable knowledge for future projects; at a larger scale it could result in significant cost savings."
            ],
            "future": [
                "Some functionality discussed initially but ultimately rejected was to keep a record of which agent had been issued which PID. While this would have been informative, in the end there didn’t seem to be a strong case for that data to be retained. If greater accountability of the PIDs were to be deemed a priority in the future though, this would be a good place to start."
            ]
        },
        "language": "C#",
        "title": "PID generator"
    },
    {
        "_key": "3",
        "content": {},
        "language": "Python",
        "title": "Automated testing"
    },
    {
        "_key": "4",
        "content": {},
        "language": "C#",
        "title": "Data from Microsoft Dynamics"
    },
    {
        "_key": "5",
        "content": {},
        "language": "jQuery",
        "title": "Community Maps"
    },
    {
        "_key": "6",
        "content": {},
        "language": "jQuery",
        "title": "Remember When"
    }
]